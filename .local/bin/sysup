#!/bin/bash

#   ███████╗██╗   ██╗███████╗██╗   ██╗██████╗    #
#   ██╔════╝╚██╗ ██╔╝██╔════╝██║   ██║██╔══██╗   #
#   ███████╗ ╚████╔╝ ███████╗██║   ██║██████╔╝   #
#   ╚════██║  ╚██╔╝  ╚════██║██║   ██║██╔═══╝    #
#   ███████║   ██║   ███████║╚██████╔╝██║        #
#   ╚══════╝   ╚═╝   ╚══════╝ ╚═════╝ ╚═╝        #
#      ___        ___ _                  __      #
#     | _ )_  _  | _ \ |  _  _ _ _ __ __/  \     #
#     | _ \ || | |   / |_| || | ' \\ \ / () |    #
#     |___/\_, | |_|_\____\_, |_||_/_\_\\__/     #
#          |__/           |__/                   #


color="auto"

while getopts "cpya:i:h" arg; do
    case "$arg" in
    c) color="always" ;;
    p) force_pacman="yes" ;;
    y) auto_confirm="yes" ;;
    a) alert_sound="$OPTARG" ;;
    i) alert_icon="$OPTARG" ;;
    *)
        echo "Usage: $(basename "$0") [OPTIONS]"
        printf "\nOptions:\n"
        echo "  -c                      Force arch package installers to use color"
        echo "  -p                      Force using pacman as arch package installer"
        echo "  -y                      Automatically confirm all yes/no prompts"
        echo "  -a <ALERT SOUND>        Path to sound file to play when done"
        echo "                          This will also send a pop-up notification"
        echo "  -i <NOTIFICATION ICON>  Path to icon to use for pop-up notification"
        echo "                          Does nothing if -a is not set"
        echo "  -h                      Print this help message"
        exit 1
    esac
done
shift $(($OPTIND-1))


print_separator() {
    printf "%s\n\n" "---"
}

# Debian
if command -v apt > /dev/null; then
    echo " Updating Apt..."
    sudo apt update
    sudo apt dist-upgrade
    sudo apt full-upgrade
    sudo apt autopurge
    print_separator
fi
if command -v snap > /dev/null; then
    echo " Refreshing Snap..."
    sudo snap refresh
    print_separator
fi

# RedHat
if command -v dnf > /dev/null; then
    echo "󱄛 Updating Dnf..."
    sudo dnf distro-sync
    sudo dnf upgrade
    sudo dnf autoremove
    print_separator
fi

# Arch
[ -n "$auto_confirm" ] && yflag='--noconfirm'
if command -v yay > /dev/null && [ -z "$force_pacman" ]; then
    echo "󰣇 Updating Yay..."
    yay $yflag --color "$color" -Syu
    yay -Qdtq > /dev/null \
    && yay $yflag --color "$color" -Rnsc $(yay -Qdtq)
    yay $yflag --color "$color" -Sc
    skip_pacman=1
    print_separator
fi
if command -v paru > /dev/null && [ -z "$force_pacman" ]; then
    echo "󰣇 Updating Paru..."
    paru $yflag --color "$color" -Syu
    paru -Qdtq > /dev/null \
    && paru $yflag --color "$color" -Rnsc $(paru -Qdtq)
    paru $yflag --color "$color" -Sc
    skip_pacman=1
    print_separator
fi
if command -v pacman > /dev/null && [ -z "$skip_pacman" ]; then
    echo "󰣇 Updating Pacman..."
    sudo pacman $yflag --color "$color" -Syu
    pacman -Qdtq > /dev/null \
    && sudo pacman $yflag --color "$color" -Rnsc $(pacman -Qdtq)
    print_separator
fi

# Flatpak
[ -n "$auto_confirm" ] && yflag='--assumeyes'
if command -v flatpak > /dev/null; then
    echo " Updating Flatpak..."
    flatpak $yflag update
    print_separator
fi

# Rust
if command -v rustup > /dev/null; then
    echo "🦀 Updating Rust..."
    rustup update
    print_separator
fi

# Haskell
if command -v ghcup > /dev/null; then
    echo " Updating Haskell..."
    ghcup upgrade 2>&1 \
    | tee /dev/stderr \
    | awk -F "'" '/New \w+ version available/ {print $2}' \
    | tee /dev/stdout \
    | sh;

    ghcup gc
    print_separator
fi

# Locate
if command -v updatedb > /dev/null; then
    echo "Updating Database..."
    sudo updatedb --verbose \
    | awk -v c="$(tput cols)" '
        {
            r = substr($0, c - 3, 1)
            printf "\r\033[K%s", substr($0, 0, c - 3)
            if(r) printf "..."
            n++
        }
        END { printf "\r\033[K%d Files\n", n }'
    print_separator
fi

command -v alert > /dev/null \
&& [ "$alert_sound" != "" ] \
&& alert -f "$alert_sound" -n "$(basename "$0")" -i "$alert_icon" 'Done!' \
|| echo 'Done!'
